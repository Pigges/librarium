---
import MarkdownClaim from './MarkdownClaim.astro';

import generateContentUrl from '../utils/generateContentUrl';

interface Props {
    claim: object
}

const { claim } = Astro.props;

let fetched;

function replaceLBRYURLs(content) {
  const regex = /lbry:\/\/[^\s#]{1,248}([#:][^\s]*)?/gu;
  return content.replace(regex, (match) => {
    return match.replace("lbry://", "/").replaceAll('#', ':');
  });
}

if (claim.value.source.media_type !== 'application/pdf')
    fetched = await (await fetch(generateContentUrl(claim.name, claim.claim_id))).text();
---

<div class="document">
    {claim.value.source.media_type === 'text/markdown' && (
        <MarkdownClaim content={fetched}/>
    )}

    {claim.value.source.media_type === 'application/pdf' && (
        <object data={generateContentUrl(claim.name, claim.claim_id)}></object>
    )}

    {claim.value.source.media_type === 'text/html' && (
    <iframe srcdoc={'<base target="_parent">' + replaceLBRYURLs(fetched)} sandbox="allow-same-origin allow-top-navigation"></iframe>
    )}
</div>
<style>
    .document {
        /* height: 100%; */
        height: auto;
        width: 100%;
        aspect-ratio: 16/9;
    }

    .document object {
      width: 100%;
      aspect-ratio: 16/9;
      border: none;
    }

    .document iframe {
        width: 100%;
        height: 100%;
        border: none;
    }
</style>
